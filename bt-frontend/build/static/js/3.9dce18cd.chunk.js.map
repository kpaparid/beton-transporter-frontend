{"version":3,"sources":["components/AddressPicker.js","components/MyFormSelect.js","components/LazyInput.js"],"names":["AddressPicker","memo","inputStyle","value","onChange","useGeoAddresses","places","handlePlaceChange","handlePlaceInputChange","useCallback","e","target","useEffect","className","CustomDropdown","as","ButtonGroup","toggleAs","toggleClassName","portal","variant","align","drop","minRows","style","map","p","Dropdown","Item","onClick","blur","isEqual","MyFormSelect","props","availableValues","hidden","maxWidth","minWidth","disabledArrow","useState","find","v","label","selectedValue","setSelectedValue","options","defaultValue","classNamePrefix","selectedOption","isSearchable","isClearable","justifyContent","components","IndicatorSeparator","menuPortalTarget","document","getElementById","styles","container","base","width","menuPortal","zIndex","control","valueContainer","padding","length","singleValue","marginLeft","marginRight","closeMenuOnScroll","event","id","theme","colors","primary","LazyInput","forwardRef","ref","type","disableMonthSwap","modal","backupRef","useRef","domRef","handleTextAreaChange","handleDateChange","handleDefaultChange","handleOutsideClick","current","focus","show","setShow","renderComponent","TimePicker","dropdownClassName","labelIsDisabled","moment","isValid","format","singleDate","autoFocus","ComponentPreLoader","logo"],"mappings":"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","file":"static/js/3.9dce18cd.chunk.js","sourcesContent":["import { Dropdown } from \"@themesberg/react-bootstrap\";\r\nimport { isEqual } from \"lodash\";\r\nimport { memo, useCallback, useEffect } from \"react\";\r\nimport { ButtonGroup } from \"react-bootstrap\";\r\nimport TextareaAutosize from \"react-textarea-autosize\";\r\nimport { CustomDropdown } from \"./Filters/CustomDropdown\";\r\nimport { useGeoAddresses } from \"../pages/myComponents/util/services\";\r\n\r\nexport const AddressPicker = memo(({ inputStyle, value, onChange }) => {\r\n  const { places, onChange: handlePlaceChange } = useGeoAddresses();\r\n\r\n  const handlePlaceInputChange = useCallback(\r\n    (e) => onChange(e.target.value),\r\n    [onChange]\r\n  );\r\n  useEffect(() => handlePlaceChange(value), [value, handlePlaceChange]);\r\n  return (\r\n    <div className=\"p-1 w-100 address-picker\">\r\n      <CustomDropdown\r\n        as={ButtonGroup}\r\n        className={`w-100 `}\r\n        toggleAs=\"custom\"\r\n        toggleClassName=\"p-0 border-0\"\r\n        portal={false}\r\n        variant=\"transparent\"\r\n        align=\"end\"\r\n        drop=\"down\"\r\n        value={\r\n          <div>\r\n            <TextareaAutosize\r\n              value={value || \"\"}\r\n              minRows={1}\r\n              style={{ ...inputStyle }}\r\n              onChange={handlePlaceInputChange}\r\n            />\r\n          </div>\r\n        }\r\n      >\r\n        <div className=\"\">\r\n          {places?.map((p) => (\r\n            <Dropdown.Item\r\n              className={\r\n                \"text-break text-wrap w-100 dropdown-item\" +\r\n                (p === value ? \" active\" : \" non-active\")\r\n              }\r\n              key={p}\r\n              onClick={(e) => {\r\n                onChange(p);\r\n                e.target.blur();\r\n              }}\r\n            >\r\n              {p}\r\n            </Dropdown.Item>\r\n          ))}\r\n        </div>\r\n      </CustomDropdown>\r\n    </div>\r\n  );\r\n}, isEqual);\r\n","import React, { useState } from \"react\";\r\nimport Select from \"react-select\";\r\n\r\nexport const MyFormSelect = (props) => {\r\n  const {\r\n    availableValues,\r\n    value,\r\n    onChange,\r\n    hidden = false,\r\n    maxWidth,\r\n    minWidth,\r\n    className = \"\",\r\n    disabledArrow,\r\n  } = props;\r\n  const [selectedValue, setSelectedValue] = useState(\r\n    availableValues.find((v) => v.label === value)\r\n  );\r\n  function handleChange(selectedOption) {\r\n    setSelectedValue(selectedOption);\r\n    onChange && onChange(selectedOption?.label || \"\");\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className=\"dummy px-2 d-flex flex-nowrap justify-content-center w-100\"\r\n      style={{ maxWidth }}\r\n    >\r\n      {availableValues && !hidden && (\r\n        <div\r\n          className={\r\n            \"d-flex justify-content-center overflow-visible w-100 \" + className\r\n          }\r\n        >\r\n          <Select\r\n            disabledArrow={disabledArrow}\r\n            options={availableValues}\r\n            defaultValue={selectedValue}\r\n            // className=\"w-100\"\r\n            classNamePrefix=\"react-select\"\r\n            onChange={handleChange}\r\n            isSearchable={false}\r\n            isClearable={true}\r\n            style={{ justifyContent: \"center\" }}\r\n            components={{\r\n              IndicatorSeparator: () => null,\r\n            }}\r\n            menuPortalTarget={document.getElementById(\"root\")}\r\n            styles={{\r\n              container: (base) => ({\r\n                ...base,\r\n                justifyContent: \"center\",\r\n                width: \"100%\",\r\n              }),\r\n              menuPortal: (base) => ({ ...base, zIndex: 9999 }),\r\n              control: (base) => ({\r\n                ...base,\r\n                // width: \"100%\",\r\n                // width: \"calc(100% + 80px)\",\r\n                // maxWidth,\r\n              }),\r\n              valueContainer: (base) => ({\r\n                ...base,\r\n                padding: 0,\r\n                justifyContent: \"center\",\r\n                width: selectedValue\r\n                  ? 7 * (selectedValue?.label).length + 50\r\n                  : 73,\r\n              }),\r\n              singleValue: (base) => ({\r\n                ...base,\r\n                padding: 0,\r\n                marginLeft: 0,\r\n                marginRight: 0,\r\n              }),\r\n            }}\r\n            closeMenuOnScroll={(event) => {\r\n              return event.target.id === \"root\";\r\n            }}\r\n            theme={(theme) => ({\r\n              ...theme,\r\n              colors: {\r\n                ...theme.colors,\r\n                primary: \"black\",\r\n              },\r\n            })}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import { isEqual } from \"lodash\";\r\nimport moment from \"moment\";\r\nimport React, {\r\n  forwardRef,\r\n  memo,\r\n  useCallback,\r\n  useEffect,\r\n  useRef,\r\n  useState,\r\n} from \"react\";\r\nimport TextareaAutosize from \"react-textarea-autosize\";\r\nimport { AddressPicker } from \"./AddressPicker\";\r\nimport { ComponentPreLoader } from \"./ComponentPreLoader\";\r\nimport DateSelectorDropdown from \"./DatePicker\";\r\nimport { MyFormSelect } from \"./MyFormSelect\";\r\nimport TimePicker from \"./TimePicker\";\r\n\r\nexport const LazyInput = memo(\r\n  forwardRef(\r\n    (\r\n      {\r\n        onChange,\r\n        type,\r\n        availableValues,\r\n        disableMonthSwap,\r\n        className = \"\",\r\n        modal = false,\r\n        minWidth,\r\n        maxWidth,\r\n        value,\r\n        ...rest\r\n      },\r\n      ref\r\n    ) => {\r\n      const backupRef = useRef(null);\r\n      const domRef = ref ? ref : backupRef;\r\n\r\n      const handleTextAreaChange = useCallback(\r\n        (e) => {\r\n          return onChange && onChange(e.target.value, \"text\");\r\n        },\r\n        [onChange]\r\n      );\r\n      const handleDateChange = useCallback(\r\n        (value) => {\r\n          return onChange && onChange(value, \"date\");\r\n        },\r\n        [onChange]\r\n      );\r\n      const handleDefaultChange = useCallback(\r\n        (value) => {\r\n          return onChange && onChange(value, \"text\");\r\n        },\r\n        [onChange]\r\n      );\r\n      const handleOutsideClick = useCallback(() => {\r\n        domRef.current.focus();\r\n      }, [domRef]);\r\n      const [show, setShow] = useState(true);\r\n      useEffect(() => {\r\n        setShow(false);\r\n      }, []);\r\n      const renderComponent = useCallback(() => {\r\n        switch (type) {\r\n          case \"bigText\":\r\n            return (\r\n              <TextareaAutosize\r\n                // className={inputClassName}\r\n                value={value}\r\n                onChange={handleTextAreaChange}\r\n                ref={domRef}\r\n                style={{ minWidth, maxWidth }}\r\n              />\r\n            );\r\n\r\n          case \"bigNumber\":\r\n            return (\r\n              <TextareaAutosize\r\n                // className={inputClassName}\r\n                value={value}\r\n                onChange={handleTextAreaChange}\r\n                ref={domRef}\r\n                style={{ minWidth, maxWidth }}\r\n              />\r\n            );\r\n          case \"time\":\r\n            return (\r\n              <TimePicker\r\n                // className={inputClassName}\r\n                className={\"time-picker-grid-table \" + className}\r\n                dropdownClassName={\"time-picker-grid-table-dropdown\"}\r\n                value={value}\r\n                onChange={handleDefaultChange}\r\n                inputStyle={{ minWidth, maxWidth }}\r\n              />\r\n            );\r\n          case \"constant\":\r\n            return (\r\n              <MyFormSelect\r\n                className={className}\r\n                onChange={handleDefaultChange}\r\n                availableValues={availableValues}\r\n                value={value}\r\n                minWidth={minWidth}\r\n                maxWidth={maxWidth}\r\n                labelIsDisabled\r\n              />\r\n            );\r\n\r\n          case \"date\":\r\n            const v = moment(value, \"DD.MM.YYYY\", true).isValid()\r\n              ? moment(value, \"DD.MM.YYYY\").format(\"YYYY.MM.DD\")\r\n              : value;\r\n            return (\r\n              <DateSelectorDropdown\r\n                singleDate={true}\r\n                className={\"date-picker-grid-table \" + className}\r\n                dropdownClassName={\"date-picker-grid-table-dropdown\"}\r\n                onChange={handleDateChange}\r\n                format=\"DD.MM.YYYY\"\r\n                disableMonthSwap={disableMonthSwap}\r\n                inputStyle={{ minWidth, maxWidth }}\r\n                value={v}\r\n              />\r\n            );\r\n          case \"navi\":\r\n            return (\r\n              <AddressPicker\r\n                value={value}\r\n                onChange={handleDefaultChange}\r\n                inputStyle={{ minWidth, maxWidth }}\r\n              />\r\n            );\r\n          case \"customComponent\":\r\n            return value;\r\n          case \"nonEditable\":\r\n            return (\r\n              <div className={\"d-block text-center disabled\" + className}>\r\n                {value || \"\"}\r\n              </div>\r\n            );\r\n          default:\r\n            return (\r\n              <div\r\n                onClick={handleOutsideClick}\r\n                className={\"d-block text-center w-100\" + className}\r\n              >\r\n                <input\r\n                  className={\"px-2 text-center\"}\r\n                  type={type === \"number\" ? \"number\" : \"text\"}\r\n                  value={value || \"\"}\r\n                  onChange={handleTextAreaChange}\r\n                  ref={domRef}\r\n                  style={{ minWidth, maxWidth }}\r\n                  autoFocus={false}\r\n                />\r\n              </div>\r\n            );\r\n        }\r\n      }, [\r\n        className,\r\n        disableMonthSwap,\r\n        domRef,\r\n        handleDateChange,\r\n        handleOutsideClick,\r\n        maxWidth,\r\n        minWidth,\r\n        type,\r\n        value,\r\n        handleTextAreaChange,\r\n        handleDefaultChange,\r\n        availableValues,\r\n      ]);\r\n      return (\r\n        <>\r\n          {show && (\r\n            <div style={{ width: maxWidth }}>\r\n              <ComponentPreLoader show={show} logo={false}></ComponentPreLoader>\r\n            </div>\r\n          )}\r\n          {!show && renderComponent()}\r\n        </>\r\n      );\r\n    }\r\n  ),\r\n  isEqual\r\n);\r\nexport default LazyInput;\r\n"],"sourceRoot":""}